{"version":3,"sources":["ImageFigure.tsx","homePage/HomePage.tsx","resources/text/introduction.tsx","resources/text/dataset.tsx","resources/text/goal.tsx","resources/text/networkConstruction.tsx","resources/wreath.png","topBar/TopBarButton.tsx","topBar/TopBar.tsx","bottomBar/BottomBar.tsx","sentimental/SentimentalPage.tsx","resources/text/sentIntroduction.tsx","resources/text/sentText1.tsx","resources/text/sentText2.tsx","collaborations/CollaborationsPage.tsx","resources/text/topArtists.tsx","resources/text/topArtistsList1.tsx","resources/text/topArtistsList2.tsx","resources/text/topArtistsList3.tsx","resources/text/topSongs.tsx","resources/text/connect1.tsx","resources/text/connect2.tsx","resources/text/connect3.tsx","resources/text/collabIntro.tsx","resources/text/collabText1.tsx","wordCloud/WordCloudPage.tsx","resources/text/popIntro.tsx","resources/text/popSongsIntro.tsx","resources/text/popSongsText1.tsx","resources/text/popSongsFig1.tsx","resources/text/popSongsText2.tsx","resources/text/popSongsFig2.tsx","resources/text/wordCloud.tsx","profanity/ProfanityPage.tsx","resources/text/profanityIntro.tsx","resources/text/profanityText1.tsx","resources/text/profanityText2.tsx","christmas/ChristmasPage.tsx","resources/text/christmasIntro.tsx","resources/text/christmas1.tsx","resources/text/christmasFig1.tsx","resources/text/christmas2.tsx","resources/text/christmasFig2.tsx","resources/text/topCommStuff1.tsx","resources/text/topCommStuff2.tsx","resources/text/topCommStuff3.tsx","resources/text/topCommStuff4.tsx","resources/text/topCommStuff5.tsx","resources/text/topCommStuff6.tsx","resources/text/topCommStuff7.tsx","resources/text/topCommStuff8.tsx","resources/text/topCommStuff9.tsx","resources/text/topCommStuff10.tsx","communities/CommunitiesPage.tsx","resources/text/comm1.tsx","resources/text/comm2.tsx","resources/text/comm3.tsx","resources/text/comm4.tsx","resources/text/comm5.tsx","resources/text/wordIntro.tsx","resources/text/wordAna.tsx","resources/text/comSvalAna.tsx","resources/text/comSval.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ImageFigure","style","minHeight","this","props","Grid","container","direction","justify","width","left","right","React","Component","HomePage","alignItems","item","plugins","gfm","className","Divider","height","display","justifyContent","alignContent","src","process","alt","TopBarButton","Button","color","onClick","setWindow","window","spacing","christmasMode","wreath","Typography","variant","typographyVariant","selected","label","TopBar","AppBar","position","Toolbar","selectedWindow","BottomBar","bottom","backgroundColor","target","href","marginRight","SentimentalPage","CollaborationsPage","WordCloudPage","ProfanityPage","text","CommunitiesPage","topCommStuffList1","TopCommStuff1","TopCommStuff2","TopCommStuff3","TopCommStuff4","TopCommStuff5","topCommStuffList2","TopCommStuff6","TopCommStuff7","TopCommStuff8","TopCommStuff9","TopCommStuff10","cImgs1","cImgs2","map","n","i","borderLeft","App","bind","state","setState","scrollTo","ChristmasPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03b40efb.chunk.js","sourcesContent":["import { Grid } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    left: any;\r\n    right: any;\r\n    minHeight?: number;\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass ImageFigure extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <div style={{minHeight: this.props.minHeight ?? \"256px\"}}>\r\n                <Grid container direction=\"row\" justify=\"space-around\">\r\n                    <div style={{ width: \"48%\" }}>\r\n                        {this.props.left}\r\n                    </div>\r\n                    <div style={{ width: \"48%\" }}>\r\n                        {this.props.right}\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageFigure;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport NetworkConstructionText from '../resources/text/networkConstruction';\r\nimport IntroductionText from '../resources/text/introduction';\r\nimport DataSetText from '../resources/text/dataset';\r\nimport GoalText from '../resources/text/goal';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass HomePage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <ReactMarkdown plugins={[gfm]} className=\"MDtitle\">\r\n                        Billboard Top 100 analysis\r\n                    </ReactMarkdown>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {IntroductionText}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {DataSetText}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {GoalText}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/network.png'}\r\n                                    alt=\"network\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {NetworkConstructionText}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","const text: string = `\r\nMusic plays a part in the daily lives of almost everyone and is one of the most widely used media of entertainment. \r\nOn average an individual listens to music up to 18 hours a week which corresponds to 52 minutes daily. \r\nMusic generally gathers inspiration from current trends and topics, which means that it can be quite significant in \r\ndetermining a popular trend in a specific period. In this project we look at the most popular songs through history \r\n(from 1963) and analyze period defining tendencies. What we want to investigate is whether we can observe a general \r\ndecrease in sentimental value and an increase in the use of strong language as well as determine whether this is a \r\ngeneral trend or if it’s based on isolated events.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Dataset\r\nFor our dataset, we knew that we wanted to look at musical hits. To limit our data to a manageable size, we chose to only gather data from top songs over the years. This way we limited the amount of data to a smaller size, but we still kept the data as representative of the time period. We chose 'The Billboard Hot 100' published by The Billboard Magazine as our song dataset, and although this list focuses on popularity in USA, we felt it represented global musical interest well enough for our purpose.  \r\nThis dataset was not enough, however, as it only included information about *song title*, *artist* and *rank*. We knew that we would need the lyrics of the songs as well, so we had to find an additional source of data.  \r\nWe turned to the Genius website by Genius Media Group inc and found that they had an API which allowed us to query their database by song title and artist. This second dataset allowed us to make sure our formatting of primary and featuring artists were consistent, and also allowed us to get the lyrics of the song.  \r\nIt was the combination of these two dataset which allowed us to analyze musical trends ranging from 1963 to today.  \r\nThe final network contained data from 5161 artists.\r\n`;\r\n\r\nexport default text;","const text = `\r\n## Goals\r\n\r\nOur project aims to find whether or not there is a negative trend in current music concerning sentimental value. We want to find out if the general trend of sentimental values in lyrics have grown to be more negative, and whether or not the negativity is contained in smaller communities or not. In short, we want to answer the following questions:\r\n\r\n- Is there a general negative trend when it comes to the average sentimental values of lyrics over the years?\r\n- Can we, via communities, find local interconnected groups of artists that line up with our understanding of genres and collaborating artists?\r\n- Is there a contained lower sentimental average within recent communities?\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nThe network was constructed using python.  \r\nWe initially scraped data from the Top 100 Billboard website to get the title, artist and placement of \r\nevery hit song on the list for every week dating back to 1963.  \r\nThis information was processed by our network constructor class. The constructor would use the simple information \r\nfrom the html scraping, in order to query and retreive more in depth information, such as lyrics and featuring artists, \r\nfrom the Genius API.  \r\n\r\nThe result of the API allowed us to place the song on a node corresponding with the primary artist, or multiple nodes \r\nif multiple artists are credited as the primary artist, while also constructing edges from the featured \r\nartists to the primary artist(s) with the song title as a label.  \r\nThe song is put in a dictionary attribute of the artist node with the song title as key. The values of the \r\nsong entries are *lyrics*, *placements* and *sVal*.  \r\nThe lyrics are scraped directly off the Genius website using the URL provided by the API. The placements are a \r\nlist of objects, each representing a placement on the top 100 Billboards with their respective year, week and position.  \r\n  \r\nThe sVal, or sentimental value, is calculated based on the lyrics by tokenizing, removing stop words, and \r\ntaking the average sentimental value of the words based on the wordlist from [this link](https://journals.plos.org/plosone/article/file?type=supplementary&id=info:doi/10.1371/journal.pone.0026752.s001). \r\n`;\r\n\r\nexport default text;","export default __webpack_public_path__ + \"static/media/wreath.9d27b775.png\";","import { Button, Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport wreath from '../resources/wreath.png'; // Tell webpack this JS file uses this image\r\n// import Sparkle from 'react-sparkle';\r\n\r\ninterface Props {\r\n    label?: String;\r\n    typographyVariant?: \"inherit\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"subtitle1\" | \"subtitle2\" | \"body1\" | \"body2\" | \"caption\" | \"button\" | \"overline\" | \"srOnly\" | undefined;\r\n    setWindow: (window: number) => void;\r\n    window: number;\r\n    christmasMode?: boolean;\r\n    selected?: boolean;\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass TopBarButton extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid item>\r\n                <Button color=\"inherit\" onClick={() => this.props.setWindow(this.props.window)}>\r\n                    <Grid container direction=\"row\" spacing={4} justify=\"center\" alignItems=\"center\">\r\n                        {this.props.christmasMode &&\r\n                            <Grid item>\r\n                                <img src={wreath} style={{ width: \"32px\", height: \"32px\" }} />\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <div style={{ alignContent: \"center\" }} >\r\n                                {/* {this.props.christmasMode && <Sparkle />} */}\r\n                                <Typography variant={this.props.typographyVariant ?? \"body1\"} color={this.props.selected ?? \"false\" ? \"secondary\" : \"inherit\"}>\r\n                                    {this.props.label ?? \"\"}\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        {this.props.christmasMode &&\r\n                            <Grid item>\r\n                                <img src={wreath} style={{ width: \"32px\", height: \"32px\" }} />\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Button>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBarButton;","import { AppBar, Grid, Toolbar } from '@material-ui/core';\r\nimport React from 'react';\r\nimport TopBarButton from './TopBarButton';\r\n\r\ninterface Props {\r\n    setWindow: (window: number) => void;\r\n    selectedWindow: number;\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass TopBar extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <Grid container direction=\"row\" alignItems=\"center\" justify=\"space-between\">\r\n                        <TopBarButton\r\n                            label=\"Home\"\r\n                            typographyVariant=\"h5\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={0}\r\n                            selected={0 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton\r\n                            label=\"Collaborations\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={1}\r\n                            selected={1 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton\r\n                            label=\"Most Popular\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={2}\r\n                            selected={2 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton\r\n                            label=\"Communities\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={3}\r\n                            selected={3 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton\r\n                            label=\"Sentimental Analysis\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={4}\r\n                            selected={4 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton\r\n                            label=\"Profanity\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={5}\r\n                            selected={5 === this.props.selectedWindow}\r\n                        />\r\n                        <TopBarButton label=\"Christmas\"\r\n                            setWindow={this.props.setWindow}\r\n                            window={6}\r\n                            selected={6 === this.props.selectedWindow}\r\n                            christmasMode={true}\r\n                        />\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import { Button, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nclass BottomBar extends React.Component<Props, State>{\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ position: \"fixed\", bottom: 0, width: \"100%\", backgroundColor: \"grey\"}}>\r\n                <Grid container direction=\"row\" justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Button target=\"_blank\" href=\"https://github.com/SebastianKotewitz/social_graphs_billboard/raw/main/downloadFiles/fullNetworkSentiment.gpickle\" variant=\"contained\" style={{marginRight: \"24px\"}}>\r\n                            Download Network\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button target=\"_blank\" href=\"http://www.google.com/\" variant=\"contained\" style={{marginRight: \"24px\"}}>\r\n                            Download ipynb\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default BottomBar;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport SentimentalIntroductionText from '../resources/text/sentIntroduction';\r\nimport Text1 from '../resources/text/sentText1';\r\nimport Text2 from '../resources/text/sentText2';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass SentimentalPage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {SentimentalIntroductionText}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/sentimentPerYear.png'}\r\n                                    alt=\"sentimentPerYear\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/sentimentPerQ.png'}\r\n                                    alt=\"sentimentPerQ\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text2}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SentimentalPage;","const text: string = `\r\nFor sentimental values we went through all lyrics in the network. Using the happines_average \r\nvalues of the wordlist from \r\n[this link](https://journals.plos.org/plosone/article/file?type=supplementary&id=info:doi/10.1371/journal.pone.0026752.s001), \r\nwe took all non-stop words in a songs lyrics and calculated the average score. This one value is used as the sentimental \r\nvalue of the lyrics for that song.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nInterested in how the trend in average sentimental value over time looked, we looked at the average sentimental \r\nvalue of songs for every year since 1963. We plotted the data points in a bar graph to visualize the evolution over \r\ntime. This visualization revealed a negative trend in the average sentimental value of lyrics for each year. \r\nOur graph is shown zoomed in to highlight the trend, and it is only meant to show the fact that such a trend \r\nexists. It is not necessarily meant to show the magnitude of the change over time.  \r\nThe findings of this analysis aligns with our initial hypothesis and marks completion of one of our core goals. \r\nMusic has indeed become more negatively charged over time if we consider the sentimental value of lyrics as an indicator.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nOut of curiosity, we also made a visualization of the average sentimental value of songs within quarters of the year. \r\nEvery song had its sentimental value attached to the quarter of the year in which it first appeared, and the average \r\nsentimental value for each of the four yearly quarters was calculated. These averages are presented as a bar graph, \r\nand it is shown that the average sentimental value of songs per quarter is *very* similar. The graph shows no significant \r\nrelation between quarter and sentimental value. The data is independent of release year.\r\n`;\r\n\r\nexport default text;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport CollabIntro from '../resources/text/collabIntro';\r\nimport Text1 from '../resources/text/collabText1';\r\nimport CText1 from '../resources/text/connect1';\r\nimport CText2 from '../resources/text/connect2';\r\nimport CText3 from '../resources/text/connect3';\r\nimport TopArtists from '../resources/text/topArtists';\r\nimport TopArtistsL1 from '../resources/text/topArtistsList1';\r\nimport TopArtistsL2 from '../resources/text/topArtistsList2';\r\nimport TopArtistsL3 from '../resources/text/topArtistsList3';\r\nimport TopArtistsEnd from '../resources/text/topSongs';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass CollaborationsPage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {TopArtists}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"row\" justify=\"space-around\">\r\n                        <Grid item>\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {TopArtistsL1}\r\n                            </ReactMarkdown>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {TopArtistsL2}\r\n                            </ReactMarkdown>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {TopArtistsL3}\r\n                            </ReactMarkdown>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {TopArtistsEnd}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {CText1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/in.png'}\r\n                                    alt=\"in\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/out.png'}\r\n                                    alt=\"out\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {CText2}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {CText3}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {CollabIntro}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/collabsPerSongPerYear.png'}\r\n                                    alt=\"collabsPerSongPerYear\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CollaborationsPage;","const text: string = `\r\nWe wanted to analyze who the most connected artist was, that is, the artist with the largest number of collaborations. \r\nWe distinguished between artists featuring other artists on their own songs, as well as artists \r\nbeing featured in the songs of other artists. This gaves us one list for each, as well as a combined list.   \r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 artists who most often have other artist  \r\nfeaturing on their own tracks.\r\n1. DJ Khaled (99)\r\n2. Drake (67)\r\n3. Artists United Against Apartheid (58)\r\n4. Kanye West (55)\r\n5. Lil Wayne (49)\r\n6. JAY-Z (40)\r\n7. Metro Boomin (40)\r\n8. Travis Scott (39)\r\n9. Meek Mill (35)\r\n10. Earth, Wind (34)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 artists who feature the most on  \r\nothers tracks.\r\n1. Lil Wayne (86)\r\n2. Drake (78)\r\n3. Nicki Minaj (60)\r\n4. Future (50)\r\n5. Travis Scott (47)\r\n6. Chris Brown (46)\r\n7. Kanye West (43)\r\n8. Young Thug (37)\r\n9. JAY-Z (36)\r\n10. Earth, Wind (32)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 artists appearing on tracks as primary  \r\nor featured artist\r\n1. Drake (145)\r\n2. Lil Wayne (135)\r\n3. DJ Khaled (103)\r\n4. Kanye West (98)\r\n5. Nicki Minaj (88)\r\n6. Travis Scott (86)\r\n7. Future (84)\r\n8. Chris Brown (77)\r\n9. JAY-Z (76)\r\n10. Earth, Wind (66)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nBy looking at the most connected artists appearing on the Billboard chart in relation to others, you get a clear indication of who music listeners enjoy seeing the most in collaborations, and if there exist a particular pattern in this behaviour.\r\n\r\nBy analysing these top connected artists, it is clear that most artists belong to the music genre **rap**. The different artists can overall be categorized like so:\r\n\r\n**Rappers (Hip Hop)**:\r\n* Drake\r\n* Kanye West\r\n* Lil Wayne\r\n* Travis Scott\r\n* JAY-Z\r\n* Nicki Minaj\r\n* Future\r\n* Young Thug\r\n* Meek Mill\r\n\r\n**DJ's (Hip Hop + songwriters)**:\r\n* DJ Khaled\r\n* Metro Booming\r\n\r\n**Regular singers (R&B + Pop + hiphop)**:\r\n* Chris Brown\r\n* Earth, Wind & Fire\r\n\r\n**Artists gatherings**:\r\n* Artists United Against Apartheid\r\n\r\nIt is worth noting that multiple rappers like \"**Nicki Minaj**\" for instance, are also recognized as singers. However, as rap is her primary performing form, she and others have been grouped like so.\r\n\r\nThe artist gathering \"**Artists United Against Apartheid**\" is a collection of artist who gathered together as one group to produce a single song called \"Sun City\". As 58 artists featured on this track, this one-time artist group is, due to the categorization of the data, ranked as one of the highest valued primary artists.\r\n\r\nIt is also important to note that \"**Earth, Wind**\" refers to \"**Earth, Wind & Fire**\". The band name has been split up into two artists by the implemented algorithm (as & usually refers to different primary artists on Genius). If you were to investigate the network, you would see that \"**Fire**\" is as expected ranked as number 11 with the exact same number of featured artist connections. This is one example of where the algorithm isn't optimal, but it is extremely hard to prepare for every possible real world scenario, and as \"&\" most often means seperation of main artists on Genius' api, it was decided not to change the chosen approach.\r\n\r\nYou can download the network yourself and play around with it, and see if you can find other cool patterns or implement specific attributes. \"Artist of then now and forever\" is for instance another cool artist group gathering pretty which is ranked high. Try and see if you can figure out their specific rank!\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nIt can be seen from the **in degree distribution**, that most artists only have a few number of other artists featuring on their own track. For the vast majority it only happens 1 or 2 times actually, but it is still considered \"somewhat common\" (at least not totally uncommon) to have up to 20 or 30 collaborations.\r\n`;\r\n\r\nexport default text;","const text:string = `\r\nFor features the other way around (as shown on **out degree distribution**), the vast majority of artists still only collaborates 1 or 2 times, but the **Frequency**-amount rises to almost double the amount (<1400 compared to >700). This time around though, it's only \"somewhat common\" up to 15 times per artist in general.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nThe maxmimum amount of collaborations are almost identical for the two types, but it is generally speaking up to two times as likely to have others collaborate on your song than the other way around, as the outgoing distribution is less widespread.\r\n\r\nThus, it must be consirered more likely for polular artists to have more artist feature on their own songs, than the other way around. This makes good sense, as singles more often than not sell in relation to the artist's popularity. In other words, a collab will probably sell better, if the bigger name is listed first.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Collaborations over time\r\nWe wanted to see the trend in collaborations over the years. To do this, we looked at all edges in the dataset. \r\nWe wanted the data to be normalized, so we also had to count the amount of songs for each year. \r\nThe year of a song is determined by the first time it appears on the Billboard list.  \r\n\r\nWe hypothesized that the amount of collaborations have grown over time, so we figured out a way of visualizing \r\nthe trend of collaborations when compared to the total amount of songs for each year.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nThe graph shows the relation between total songs and the amount of songs which have been collaboratory work, where a\r\nvalue of 0 means no songs for that year are collaborative works, and a value of 1 means every song is a collaboration.  \r\nThe results show a considerable trend towards more collaboration. It is also interesting to see how some \r\nof the earlier years appear to have more collaboration between artists than the years 1970-1989. \r\n`;\r\n\r\nexport default text;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport Intro from '../resources/text/wordCloud';\r\nimport PopIntro from '../resources/text/popSongsIntro';\r\nimport PopIntroPre from '../resources/text/popIntro';\r\nimport PopText1 from '../resources/text/popSongsText1';\r\nimport PopText2 from '../resources/text/popSongsText2';\r\nimport PopFig1 from '../resources/text/popSongsFig1';\r\nimport PopFig2 from '../resources/text/popSongsFig2';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass WordCloudPage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {PopIntroPre}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {PopIntro}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {PopText1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {PopFig1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {PopText2}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {PopFig2}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Intro}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/mostPop.png'}\r\n                                    alt=\"mostPop\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WordCloudPage;","const text: string = `\r\nPopularity can be both easy and hard to measure - it all depends on what type of popularity you're measuring. The collaborations section measures by connectedness, however many other forms of metrics can be used. This section investigates most popular songs, artists and terms used in lyrics among all songs appearing on the Billboard chart.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Popular Songs\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nThere are a lot of different ways to measure the success of a song or an artist, for this section success is measured by the number of weeks a song or an artist have been on billboards hot 100. We simply just go though the entire network and count the number of placements a song and use that to find the most popular songs though history.\r\n\r\nWhat is surprising for this list is that a lot of these song hasn’t necessarily reached the top position on the chart but has still managed to stay on the hot 100.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 songs with highest number of weeks on billboard hot 100\r\n1. Radioactive By Imagine Dragons (87)\r\n2. Sail By AWOLNATION (79)\r\n3. I'm Yours By Jason Mraz (76)\r\n4. How Do I Live By LeAnn Rimes (69)\r\n5. Counting Stars By OneRepublic (68)\r\n6. Party Rock Anthem By LMFAO (68)\r\n7. Rolling In The Deep By Adele (65)\r\n8. Before He Cheats By Carrie Underwood (64)\r\n9. You And Me By Lifehouse (62)\r\n10. Ho Hey By The Lumineers (62)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTo calculate the most popular artist the count of weeks a song has been on the hot 100 chart is assigned to the artist or artists that have made the song.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 artists with highest number of weeks on billboard hot 100  \r\n(counting multiple songs on the same week)\r\n1. Drake (1316)\r\n2. Taylor Swift (1021)\r\n3. Madonna (867)\r\n4. Rihanna (853)\r\n5. Kenny Chesney (827)\r\n6. Elton John (820)\r\n7. Chris Brown (806)\r\n8. Usher (759)\r\n9. Tim McGraw (751)\r\n10. Maroon 5 (719)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Popular Words\r\n\r\nSome terms are naturally a lot more common in songs than others. As the billboard chart only contains the most popular songs, it is assumed that the most common terms relates to the most basic subject of all: romance.\r\n\r\nThis is investigated by first aggregating lyrics from every song defined in the collected network of artists to one long list of words.\r\n\r\nSecond, commonly used undescriptive words like \"and\", \"or\", \"that\" etc., usually referred to as **stopwords**, have been removed from the list to make the result more relevant.\r\n\r\nFinally, the occurances of the remaining words within the list are counted together and plotted in relation to their frequency. This type of plot is referred to as a word cloud.\r\n\r\nNot surprisingly, \"love\" is the most used term in popular songs. Plenty other romantic words like baby, girl, heart are all common as well. Expression words like \"oh\", \"yeah\" and \"na\" top the list to, as does \"know\" and \"like\" itself. Ultimately, the most popular words are, well, very basic.\r\n\r\nA few swear words like \"nigga\" and \"bitch\" does make the cut. This is assumed to be due to more recent releases, which is investigated further in the Sentiment and Profanity sections.\r\n`;\r\n\r\nexport default text;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport ProfanityIntro from '../resources/text/profanityIntro';\r\nimport Text1 from '../resources/text/profanityText1';\r\nimport Text2 from '../resources/text/profanityText2';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass ProfanityPage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {ProfanityIntro}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text1}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/profanity1.png'}\r\n                                    alt=\"profanity1\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text2}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <img\r\n                            src={process.env.PUBLIC_URL + '/profanity2.png'}\r\n                            alt=\"profanity2\"\r\n                            className=\"halfPageImage\"\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfanityPage;","const text: string = `\r\nIt feels like a lot of the popular music nowadays uses a lot of profanity, but is this feeling subjective? Or can we observe a general trend?\r\n\r\nTo explore this, we will look at how big a part profanity is of music though time and which slurs are the most commonly used. \r\n\r\nWe use a blacklist as an indicator of which words should be categorized as profanity. The blacklist is created with the help of the swearing dictionary “noswearing” with can be found through [this link](https://www.noswearing.com/dictionary/).\r\n\r\nTo get an idea of how much profanity and specifically which words are used in a song lyrics, we define a function which takes a song lyric, tokenizes it and checks whether a token matches any word in the blacklist. For every matched word a dictionary is updated with the word as key and the number of matches as the value.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nBy then going through the entire network of artists and their songs, and storing how frequently a swear word is used, we can calculate the frequency of swear words in a period, which is the data displayed in the figure to the right.\r\n\r\nBy looking in the graph it is clear to see that the amount of profanity used in music has been steadily rising, but interestingly enough we see substantially dip in the years from 2005 to 2009, could the financial crisis have anything to do with this?\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nNow we know that the general use of profanity is increasing, but can we get a sense of what words are primarily used in music, and has there been a shift?\r\n\r\nBy looking at the most commonly used swear words based on year, we calculate the term frequency and use these values to create the figure below.\r\n\r\nWhat we can observe through the graph is again a general increase in frequency for profanity, but in addition to that we see a shift in which words are used in different periods. We have that profanity such as *hell* and *negro* was the goto in the time from 1968 to 180, and words such as *nigga* and *bitch* is the most frequent now.\r\n`;\r\n\r\nexport default text;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport Intro from '../resources/text/christmasIntro';\r\nimport Text1 from '../resources/text/christmas1';\r\nimport Text2 from '../resources/text/christmas2';\r\nimport Fig1 from '../resources/text/christmasFig1';\r\nimport Fig2 from '../resources/text/christmasFig2';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass HomePage extends React.Component<Props, State>{\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Intro}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            ## Naive method\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <ImageFigure\r\n                    left={\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text1}\r\n                        </ReactMarkdown>\r\n                    }\r\n                    right={\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Fig1}\r\n                        </ReactMarkdown>\r\n                    }\r\n                />\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            ## Wordlist method\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <ImageFigure\r\n                    left={\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text2}\r\n                        </ReactMarkdown>\r\n                    }\r\n                    right={\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Fig2}\r\n                        </ReactMarkdown>\r\n                    }\r\n                />\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","const text: string = `\r\n## Christmas Special\r\nAs a supplement to the sentimental analysis we would like take a closer look at the most popular Christmas songs in our network. Our assumption is that Christmas songs generally have a high sentimental value, since it's the most wonderful time of year.\r\n\r\nThe way we identify and separate Christmas songs amongst the rest is by going through the network, discarding all the songs that have been on the hot 100 chart in the weeks from 5 to 44, which correlates to all months with November, December and January excluded. We assume that Christmas songs becomes popular on a yearly basis, therefore we make sure that it can only be a Christmas song if it appears on the chart multiple years.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nBy looking at the top 10 found Christmas songs, we see a correlation between a high sentimental value and the found song being a Christmas song, but to get an overall picture of the situation, we calculate the average sentimental value for all found Christmas songs.\r\n\r\nJust to compare, the average sentimental score for songs outside the Christmas genre is around 5.55 to 5.6, compared to these numbers it becomes clear that Christmas songs are generally more positive with a average score of 5.7.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 Christmas songs with with their sentimental values\r\n1. All I Want For Christmas Is You By Mariah Carey (5.966992)\r\n2. Rockin' Around The Christmas Tree By Brenda Lee (6.225000)\r\n3. Closer To The Heart By Rush (6.088406)\r\n4. Jingle Bell Rock By Bobby Helms (5.870252)\r\n5. It's The Most Wonderful Time Of The Year By Andy Williams (5.835600)\r\n6. Last Christmas By Wham! (5.707113)\r\n7. Way Back Home By The Crusaders (6.480000)\r\n8. Feliz Navidad By José Feliciano (6.318779)\r\n9. River Deep - Mountain High By The Supremes (6.182000)\r\n10. River Deep - Mountain High By The Four Tops (6.182000)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nBut if we inspect the top 10 Christmas songs list a bit closer, we notice that not all of the entries are actually Christmas songs (entries 3, 7, 9 and 10). A way to further filter our Christmas songs list is by analyzing if a song actually mentions anything about Christmas. The way we do this creating a Christmas word list with the help of *teachstarter’s* Christmas Vocabulary which can be found on [this link]( https://www.teachstarter.com/au/teaching-resource/christmas-word-wall-vocabulary/). \r\n\r\nBy going through the network once more, but this time also checking if a song has any Christmas words, we get the following top 10 Christmas songs, with the average sentimental value being around 5.9.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nTop 10 sorted Christmas songs with with their sentimental values\r\n1. All I Want For Christmas Is You By Mariah Carey (5.966992)\r\n2. Rockin' Around The Christmas Tree By Brenda Lee (6.225000)\r\n3. Jingle Bell Rock By Bobby Helms (5.870252)\r\n4. It's The Most Wonderful Time Of The Year By Andy Williams (5.835600)\r\n5. Last Christmas By Wham! (5.707113)\r\n6. Feliz Navidad By José Feliciano (6.318779)\r\n7. Sleigh Ride By The Ronettes (6.167895)\r\n8. Rudolph The Red-Nosed Reindeer By Gene Autry (5.926263)\r\n9. Holly Holy By Junior Walker (5.892471)\r\n10. Holly Holy By The All Stars (5.892471)\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 8\r\n\r\nTop 10 artists by degree\r\n\r\n- Drake: 72 \r\n- Future: 64 \r\n- Metro Boomin: 56\r\n- Travis Scott: 55\r\n- 21 Savage: 49\r\n- Lil Baby: 47 \r\n- Young Thug: 47\r\n- Gunna: 35\r\n- Juice WRLD: 32\r\n- Lil Uzi Vert: 28\r\n\r\nTop 10 artists by songs\r\n\r\n- Drake: 151 \r\n- Future: 73 \r\n- The Weeknd: 56\r\n- Lil Uzi Vert: 48\r\n- Meek Mill: 42\r\n- YoungBoy Never Broke Again: 41\r\n- Post Malone: 39\r\n- Lil Baby: 38\r\n- Juice WRLD: 36\r\n- Travis Scott: 34\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 2 \r\n\r\n Top 10 artists by degree \r\n\r\n- Fat Joe: 14\r\n- Ja Rule: 11\r\n- Mary J. Blige: 7\r\n- Case: 6\r\n- Fabolous: 6\r\n- Kelly Price: 6\r\n- Ashanti: 6\r\n- Artists Stand Up to Cancer: 5\r\n- Dre: 4\r\n- Remy Ma: 4\r\n\r\n Top 10 artists by songs \r\n\r\nMary J. Blige: 31\r\n- Sheryl Crow: 16\r\n- Fabolous: 12\r\n- Fat Joe: 12\r\n- Ja Rule: 11\r\n- Jodeci: 11\r\n- Joe: 10\r\n- Dru Hill: 10\r\n- No Doubt: 8\r\n- Ashanti: 7\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 1 \r\n\r\n Top 10 artists by degree \r\n\r\n- Lil Wayne: 82\r\n- DJ Khaled: 54\r\n- Chris Brown: 46\r\n- Nicki Minaj: 40\r\n- Big Sean: 31\r\n- Rick Ross: 29\r\n- Justin Bieber: 24\r\n- Ariana Grande: 21\r\n- TPain: 21\r\n- Wale: 18\r\n\r\n Top 10 artists by songs \r\n\r\n- Lil Wayne: 70\r\n- Justin Bieber: 65\r\n- Ariana Grande: 58\r\n- Chris Brown: 50\r\n- Nicki Minaj: 43\r\n- Usher: 35\r\n- DJ Khaled: 34\r\n- T.I.: 34\r\n- Big Sean: 30\r\n- Trey Songz: 22\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 0 \r\n\r\n Top 10 artists by degree \r\n\r\n- Smokey Robinson: 52\r\n- The Miracles: 50\r\n- Artists United Against Apartheid: 48\r\n- Marvin Gaye: 29\r\n- Tammi Terrell: 15\r\n- Diana Ross: 10\r\n- Peabo Bryson: 10\r\n- Babyface: 7\r\n- Roberta Flack: 7\r\n- Kenny G: 6\r\n\r\n Top 10 artists by songs \r\n\r\n- Marvin Gaye: 48\r\n- The Temptations: 45\r\n- The Beach Boys: 43\r\n- Rod Stewart: 42\r\n- Diana Ross: 38\r\n- Smokey Robinson: 34\r\n- The Miracles: 31\r\n- Aerosmith: 26\r\n- Bruce Springsteen: 24\r\n- Céline Dion: 21\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 10 \r\n\r\n Top 10 artists by degree \r\n\r\n- Gladys Knight: 58\r\n- The Pips: 56\r\n- Chaka Khan: 12\r\n- Quincy Jones: 10\r\n- Rufus: 8\r\n- Dionne Warwick: 5\r\n- Brandy: 5\r\n- James Ingram: 4\r\n- Johnny Mathis: 3\r\n- Linda Ronstadt: 3\r\n\r\n Top 10 artists by songs \r\n\r\n- Billy Joel: 42\r\n- Gladys Knight: 29\r\n- Linda Ronstadt: 28\r\n- The Pips: 28\r\n- Dionne Warwick: 20\r\n- Brandy: 15\r\n- Barry White: 14\r\n- Monica: 12\r\n- SWV: 11\r\n- Jeffrey Osborne: 10\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 16 \r\n\r\n Top 10 artists by degree \r\n\r\n- Blake Shelton: 9\r\n- A$AP Rocky: 8\r\n- Major Lazer: 8\r\n- Iyaz: 5\r\n- Hannah Montana: 4\r\n- Miley Cyrus: 4\r\n- Bruno Mars: 4\r\n- MØ: 3\r\n- Tracy Byrd: 3\r\n- Skrillex: 3\r\n\r\n Top 10 artists by songs \r\n\r\n- Blake Shelton: 37\r\n- Miley Cyrus: 23\r\n- Hannah Montana: 20\r\n- Trace Adkins: 18\r\n- Train: 14\r\n- Bruno Mars: 13\r\n- Gwen Stefani: 12\r\n- Montgomery Gentry: 10\r\n- Tyler\r\n- The Creator: 10\r\n- A$AP Rocky: 9\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 17 \r\n\r\n Top 10 artists by degree \r\n\r\n- Kenny Rogers: 5\r\n- Alison Krauss: 4\r\n- The Crooklyn Dodgers: 3\r\n- Prince: 3\r\n- Sheena Easton: 3\r\n- O.C.: 2\r\n- Tevin Campbell: 2\r\n- Chubb Rock: 2\r\n- Union Station: 2\r\n- The First Edition: 2\r\n\r\n Top 10 artists by songs \r\n\r\n- Prince: 27\r\n- Kenny Rogers: 18\r\n- Tevin Campbell: 12\r\n- Sheena Easton: 8\r\n- John Michael Montgomery: 6\r\n- The Crooklyn Dodgers: 2\r\n- O.C.: 1\r\n- Yvette Michele: 1\r\n- Alison Krauss: 1\r\n- Chubb Rock: 1\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 7 \r\n\r\n Top 10 artists by degree \r\n\r\n- Brooks: 43\r\n- Dunn: 43\r\n- Forever: 31\r\n- Artists Of Then\r\n- Now: 31\r\n- Tim McGraw: 10\r\n- Faith Hill: 9\r\n- Thomas Rhett: 7\r\n- Vince Gill: 7\r\n- Waylon Jennings: 6\r\n- Kenny Chesney: 6\r\n\r\n Top 10 artists by songs \r\n\r\n- Kenny Chesney: 50\r\n- Tim McGraw: 49\r\n- Keith Urban: 40\r\n- Jason Aldean: 35\r\n- Rascal Flatts: 34\r\n- George Strait: 34\r\n- Brad Paisley: 33\r\n- Carrie Underwood: 31\r\n- Luke Bryan: 28\r\n- Alan Jackson: 25\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 4 \r\n\r\n Top 10 artists by degree \r\n\r\n- Paul McCartney: 48\r\n- Wings: 40\r\n- John Lennon: 11\r\n- JID: 10\r\n- Heavy D: 9\r\n- Dreamville\r\n- Bas: 9\r\n- Michael Jackson: 8\r\n- Yoko Ono: 8\r\n- J. Cole: 6\r\n- The Rolling Stones: 6\r\n\r\n Top 10 artists by songs \r\n\r\n- Stevie Wonder: 56\r\n- The Rolling Stones: 52\r\n- Michael Jackson: 46\r\n- Paul McCartney: 39\r\n- J. Cole: 38\r\n- Wings: 20\r\n- Tom Petty and the Heartbreakers: 19\r\n- TLC: 15\r\n- Kenny Loggins: 15\r\n- Jermaine Jackson: 13\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nCommunity 11 \r\n\r\n Top 10 artists by degree \r\n\r\n- JAYZ: 48\r\n- Kanye West: 43\r\n- Eminem: 28\r\n- Calvin Harris: 18\r\n- Khalid: 16\r\n- Beyoncé: 15\r\n- Pharrell Williams: 15\r\n- Ed Sheeran: 10\r\n- Otis Redding: 10\r\n- Rihanna: 10\r\n\r\n Top 10 artists by songs \r\n\r\n- Taylor Swift: 105\r\n- Eminem: 70\r\n- Kanye West: 65\r\n- JAYZ: 50\r\n- Beyoncé: 48\r\n- Rihanna: 41\r\n- Mariah Carey: 40\r\n- Ed Sheeran: 30\r\n- Katy Perry: 29\r\n- P!nk: 28\r\n`;\r\n\r\nexport default text;","import { Divider, Grid } from '@material-ui/core';\r\nimport ImageFigure from '../ImageFigure';\r\nimport React from 'react';\r\nimport Text1 from '../resources/text/comm1';\r\nimport Text2 from '../resources/text/comm2';\r\nimport Text3 from '../resources/text/comm3';\r\nimport Text4 from '../resources/text/comm4';\r\nimport Text5 from '../resources/text/comm5';\r\nimport TopCommStuff1 from '../resources/text/topCommStuff1';\r\nimport TopCommStuff2 from '../resources/text/topCommStuff2';\r\nimport TopCommStuff3 from '../resources/text/topCommStuff3';\r\nimport TopCommStuff4 from '../resources/text/topCommStuff4';\r\nimport TopCommStuff5 from '../resources/text/topCommStuff5';\r\nimport TopCommStuff6 from '../resources/text/topCommStuff6';\r\nimport TopCommStuff7 from '../resources/text/topCommStuff7';\r\nimport TopCommStuff8 from '../resources/text/topCommStuff8';\r\nimport TopCommStuff9 from '../resources/text/topCommStuff9';\r\nimport TopCommStuff10 from '../resources/text/topCommStuff10';\r\nimport WordIntro from '../resources/text/wordIntro';\r\nimport WordAna from '../resources/text/wordAna';\r\nimport ComSent from '../resources/text/comSval';\r\nimport ComSentAna from '../resources/text/comSvalAna';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport '../markdown.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nclass CommunitiesPage extends React.Component<Props, State>{\r\n\r\n    topCommStuffList1: string[] = [\r\n        TopCommStuff1,\r\n        TopCommStuff2,\r\n        TopCommStuff3,\r\n        TopCommStuff4,\r\n        TopCommStuff5,\r\n    ];\r\n\r\n    topCommStuffList2: string[] = [\r\n        TopCommStuff6,\r\n        TopCommStuff7,\r\n        TopCommStuff8,\r\n        TopCommStuff9,\r\n        TopCommStuff10,\r\n    ];\r\n\r\n    cImgs1: string[] = [\r\n        \"c8.png\",\r\n        \"c2.png\",\r\n        \"c1.png\",\r\n        \"c0.png\",\r\n        \"c10.png\",\r\n    ];\r\n\r\n    cImgs2: string[] = [\r\n        \"c16.png\",\r\n        \"c17.png\",\r\n        \"c7.png\",\r\n        \"c4.png\",\r\n        \"c11.png\",\r\n    ];\r\n\r\n    render() {\r\n        return (\r\n            <Grid container direction=\"column\" alignItems=\"stretch\">\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text1}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text2}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <img\r\n                                    src={process.env.PUBLIC_URL + '/connect.png'}\r\n                                    alt=\"connect\"\r\n                                    className=\"halfPageImage\" />\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <div style={{ height: \"100%\", display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\r\n                                <Grid container direction=\"column\" justify=\"center\">\r\n                                    <Grid item>\r\n                                        <img\r\n                                            src={process.env.PUBLIC_URL + '/cBar.png'}\r\n                                            alt=\"cBar\"\r\n                                            className=\"halfPageImage\" />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <img\r\n                                            src={process.env.PUBLIC_URL + '/cSize.png'}\r\n                                            alt=\"cSize\"\r\n                                            className=\"halfPageImage\" />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {Text3}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text4}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <Grid container direction=\"row\">\r\n                        {this.topCommStuffList1.map((n, i) =>\r\n                            <div style={{ width: \"19.9%\", borderLeft: i === 0 ? \"0px solid black\" : \"1px solid black\" }}>\r\n                                <Grid item>\r\n                                    <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                        {n}\r\n                                    </ReactMarkdown>\r\n                                </Grid>\r\n                            </div>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Divider />\r\n\r\n                <Grid item>\r\n                    <Grid container direction=\"row\">\r\n                        {this.topCommStuffList2.map((n, i) =>\r\n                            <div style={{ width: \"19.9%\", borderLeft: i === 0 ? \"0px solid black\" : \"1px solid black\" }}>\r\n                                <Grid item>\r\n                                    <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                        {n}\r\n                                    </ReactMarkdown>\r\n                                </Grid>\r\n                            </div>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {Text5}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {WordIntro}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <Grid container direction=\"row\">\r\n                        {this.cImgs1.map((n, i) =>\r\n                            <div style={{ width: \"20%\" }}>\r\n                                <Grid item>\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + '/' + n}\r\n                                        alt={n}\r\n                                        className=\"halfPageImage\" />\r\n                                </Grid>\r\n                            </div>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <Grid container direction=\"row\">\r\n                        {this.cImgs2.map((n, i) =>\r\n                            <div style={{ width: \"20%\" }}>\r\n                                <Grid item>\r\n                                    <img\r\n                                        src={process.env.PUBLIC_URL + '/' + n}\r\n                                        alt={n}\r\n                                        className=\"halfPageImage\" />\r\n                                </Grid>\r\n                            </div>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <div className=\"centerBodyTextDiv\">\r\n                        <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                            {WordAna}\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <ImageFigure\r\n                        left={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {ComSentAna}\r\n                            </ReactMarkdown>\r\n                        }\r\n                        right={\r\n                            <ReactMarkdown plugins={[gfm]} className=\"MDbody\">\r\n                                {ComSent}\r\n                            </ReactMarkdown>\r\n                        }\r\n                    />\r\n                </Grid>\r\n\r\n                <div style={{ minHeight: \"128px\" }} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommunitiesPage;","const text: string = `\r\nIt is expected that artists from different times and genres will navigate in different communities when they collaborate with others. It doesn't seem likely that Heavy Metal bands will collaborate with Jazz musicians very often for instance. However, many popular songs like \"Take What You Want\" by Post Malone, Ozzy Osbourne and Travis Scott also mixes artists from both different times and genres. As the Hot 100 chart mainly covers mainstream popular music though, most songs will naturally belong to more centralized genres - which might make it harder to partioning artists into communties.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Largest connected component\r\nTo find communities, artists with no or insignificant relation to the largest connected component (biggest spider web of artists stongly connected to each other) within the network have been removed. This is done to elimiate small uninteresting communities and provide the algorithm used to divide the network into different partitionings with the best possible terms of conditions. The illustration of this huge interconnected spiderweb looks like the picture to the right. In opposition to the whole network visualized on the front page, all artists are connected to each other this time around. Just by looking at the visualization, multiple communities seems to appear in the outer rims.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Creation of communities\r\n\r\nCommunities within the network are created by dividing nodes into different groups according to the Louvain Algorithm. This partitioning results in 28 communities. The distribution of the sizes regarding these communities are plotted to the left both ordered both by number (given randomly) and by size.\r\n\r\nThe top communities ranked by number of artists within are (listed by assigned number):\r\n1. **8**\r\n2. **2**\r\n3. **1**\r\n4. **0**\r\n5. **10**\r\n6. **16**\r\n7. **17**\r\n8. **7**\r\n9. **4**\r\n10. **11**\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Top artists within each network\r\n\r\nThe top artists for each community are sorted by two types of popularity: number of featuring connections and number of songs on the billboard chart in total. The communited are displayed according to its size, with the biggest one first.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nFrom just looking at the top artists within each network on both metrics, it is clear that there exist some sort of relation between them.\r\n\r\nThe biggest community (number 8) naturally houses many of the biggest artist; \"Drake\", \"Future\", \"Travis Scott\" and \"Young Thug\". These were all part of the top 10 most connected artists. They are also all modern rap/hip hop artist with recent hits, just like the rest.\r\n\r\nMany of the artists top in both categories, however some who tend to work more alone, are now present as well - like \"The Weeknd\" for example.\r\n\r\nThe second biggest community (number 2) houses totally different artists, all with performance origin around the 90's. If you look up \"Fat Joe\", \"Mary J. Blige\", \"Sheryl Crow\" and \"Fabolous\", they all differ in genres, unlike before. The music industry was different back then though.\r\n\r\nCommunity 1, 16 and 11 all features modern artists, with multiple being on the top featuring list above too. More genres seem to emerge at this point, as pop and electronic artists are included as well.\r\n\r\nCommunity 2, 0, 10, 7 and 4 all hold artists from different eras. \"Marvin Gaye\", \"The Beach Boys\", \"Bruce Springsteen\" and \"Céline Dion\" from community 0 are all extremely popular artists with performance origin around the 70's and 80's, whereas equally big names like \"Stevie Wonder\", \"The Rolling Stones\", \"Michael Jackson\", \"Paul McCartney\" etc. top community 4, who mostly began their music career around 10 years earlier according to quick google searches. Most artists are still performing this very day though, so their popularity have crossed each other at some point.\r\n\r\nUltimately, time seems to be the ever ruling influence on what community an artists belong to, though genre does seem to influate slightly as well on the more modern ones.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n## Popular terms within each network\r\n\r\nAs with the most popular terms for the whole network, Wordclouds are a good visual tool to get a grasp of what lyrical strengs each community withholds opposed to each other. These wordclouds will like before be created by aggregating all lyrical texts within each community. This time however, the frequency distribution will not only be calculated by raw count, but in relation to common terms in the other communities - so called TF-IDF counts. This means that words that are unique to one community will have a high score, whereas words like \"love\" presumed to be heavily used within each community will not.\r\n\r\nThese wordclouds consisting of unique terms might seem rubbish at first. However, by analyzing in relation to found artists within the different communities, they do make some sense!\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nThe first wordcloud for communtiy 8 is filled with different slang. New invented slang is very common among modern rap musicians, which is exactly what this comminy consist of.\r\n\r\nThe second wordcloud related to community 2 still uses slang, however in a more traditional way. Many words are actual words as well, and seem quite different. It was revealed that this community houses many different music genres, which makes sense in relation to the different use of distinct words.\r\n\r\nIf we investigate community 4 that withholds some of the biggest artists of all times, with their origin around the 60's, the biggest term \"addams\" most likely refers to the popular fictional family \"The addams family\", that ran as television show back in the 60's [17]. \"Bowakawa\" and \"pousse\" form a popular song by John Lennon, and \"angie\" and \"shadoobie\" are both popular songs by \"The Rolling Stones\". Let's not forget Michael Jacksons wonder \"Smooth Criminal\" either.\r\n\r\nIt is also impossible not to notice the big \"Jolene\" all over community 7 which must of course refer to Dolly Partons mega hit by the same name. If we investigate which community she belongs to, it is of course this exact one! You can try to play around with these communities yourself and find other cool terms and artists by downlading the network and following the instructions in the linked Ipython Notebook listed at the bottom.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\n### Sentimental values within communities\r\n\r\nIf we investigate the average sentimental value within each community, it is assumed on behalf of the hypothesis for this project, that the values will be lower for communities containing more modern artists, and vica verca. The average sentimental value is calculated by taking the total average of all lyrics related sVal values wihtin a community. These calculation are listed to the\r\n\r\nAs we investigate the values, it is clear that the communties housing the top modern artists all have lower sentimental values in comparrison to the rest. The numbers doesn't fluctuate too much, however they all represent sentimental values for mainstream music. If the hyphothesis was false, then it would be very unlikely that the exact communities with lowest overall values, all feature modern the mosr recent artists.\r\n\r\nThe biggest community (number **8**) that mostly consisted of rappers has by far the lowest value, ranking in at **5,47**. Community **1**, **11** and **16** follows shortly after with the values **5,57**, **5,58** and **5,62** (rounded). Interestingly, it seems by looking up the top artists within these communities, that rap musician's slowly shrinks. Besides *Justin Bieber*, community **1** almost entirely conists of rappers as well (For the top 10 part nonetheless), whereas community **16** seems to be housing a broad variety of genres, including both rap, pop and edm. Even *Hannah Montana* is part of this community - \"Miley Cyrus'\" disney child actor character, whom is also represented in real person. The score of this community also gets really close to the rest, which indicates that genre does play some part to the sentimental average - and not just time.\r\n\r\nAll in all, there does seem to be a clear tendency of more negativity regarding communities of more modern artists, especially the ones who identifies as rappers.\r\n`;\r\n\r\nexport default text;","const text: string = `\r\nAverage sentimental value for each community:\r\n\r\n* Community 8: 5.470406543141457\r\n* Community 2: 5.621915949337494\r\n* Community 1: 5.568893347630396\r\n* Community 0: 5.711493101163159\r\n* Community 10: 5.683578387804635\r\n* Community 16: 5.616226894533104\r\n* Community 17: 5.650967735255117\r\n* Community 7: 5.660454774574233\r\n* Community 4: 5.66140488932631\r\n* Community 11: 5.581173629412418\r\n`;\r\n\r\nexport default text;","import './App.css';\nimport React from 'react';\nimport HomePage from './homePage/HomePage';\nimport TopBar from './topBar/TopBar';\nimport BottomBar from './bottomBar/BottomBar';\nimport SentimentalPage from './sentimental/SentimentalPage';\nimport CollaborationsPage from './collaborations/CollaborationsPage';\nimport WordCloudPage from './wordCloud/WordCloudPage';\nimport ProfanityPage from './profanity/ProfanityPage';\nimport ChristmasPage from './christmas/ChristmasPage';\nimport CommunitiesPage from './communities/CommunitiesPage';\n\ninterface Props {\n}\n\ninterface State {\n  selectedWindow: number;\n}\n\nclass App extends React.Component<Props, State>{\n\n  constructor(props: Props) {\n    super(props);\n    this.setWindow = this.setWindow.bind(this);\n    this.state = { selectedWindow: 0 };\n  }\n\n  setWindow(n: number): void {\n    this.setState({ selectedWindow: n });\n    if (!(this.state.selectedWindow === n)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <TopBar setWindow={this.setWindow} selectedWindow={this.state.selectedWindow} />\n        <header className=\"App-header\">\n          {this.state.selectedWindow === 0 ? <HomePage /> : <div />}\n          {this.state.selectedWindow === 1 ? <CollaborationsPage /> : <div />}\n          {this.state.selectedWindow === 2 ? <WordCloudPage /> : <div />}\n          {this.state.selectedWindow === 3 ? <CommunitiesPage /> : <div />}\n          {this.state.selectedWindow === 4 ? <SentimentalPage /> : <div />}\n          {this.state.selectedWindow === 5 ? <ProfanityPage /> : <div />}\n          {this.state.selectedWindow === 6 ? <ChristmasPage /> : <div />}\n        </header>\n        <BottomBar />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}